-----------------------------------------------------------------
-- 2019 Igor Suntsev
-- http://dragosha.com
-- MIT License
-----------------------------------------------------------------

-- Scene controller
-- load/undload levels

local param = require "main.param"
local scene = require "main.scene"
local broadcast = require "ludobits.m.broadcast"


local function load_complete(self, url, result)
	-- Loading is complete, resources are ready to spawn

	self.ids = collectionfactory.create(url)
	--pprint(self.ids)
	local back = self.ids[hash("/background")]
	local cam = self.ids[hash("/camera")]
	local colider = self.ids[hash("/colider")]

	go.set(back, "euler.x", param.angle)
	go.set(back, "position.z", 0)

	-- Iterates all objects in collection and corrects their Z-coordinate 
	-- based on Y-coordinate: pos.z = pos.z + (pos.y / param.kY) * param.kZ
	for k, v in pairs( self.ids ) do
		if v ~= back and v ~= cam and v ~= colider then
			local pos = go.get_position(v)
			local p = go.get_world_position(v)
			pos.z = pos.z + (pos.y / param.kY) * param.kZ
			go.set_position(pos, v)
		end
	end

	---- Getting start position of the hero
	local targetpos
	if self.target == hash("") or self.target == nil then self.target = hash("/startpoint") end
	local target_id = self.ids[self.target]
	if target_id then
		targetpos = go.get_position(target_id)
		print("Hero's start point:", self.target, target_id, targetpos)
	end

	timer.delay(0.1, false,
		function()
			broadcast.send(param.LEVELLOADED, {
				name = self.name,
				targetpos = targetpos
			})
		end)
end

local function load(self, name, target)
	self.name = name
	self.target = target
	collectionfactory.load(name, load_complete)
end

local function unload(self)
	go.delete(self.ids, true)
	collectionfactory.unload(self.name)

	self.name = nil
	self.ids = nil
end

function init(self)
	load(self, "/levels#2")

	broadcast.register(param.GOTO)
end

function final(self)
	broadcast.unregister(param.GOTO)
	unload(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == param.GOTO then
		unload(self)
		timer.delay(0.2, false,
			function() 
				load(self, "/levels#"..message.value, message.target) 
			end) 
	end
end